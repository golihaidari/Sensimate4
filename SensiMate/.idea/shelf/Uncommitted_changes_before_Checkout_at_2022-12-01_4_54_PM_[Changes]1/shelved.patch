Index: app/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <color name=\"purple_200\">#FFBB86FC</color>\r\n    <color name=\"purple_500\">#FF6200EE</color>\r\n    <color name=\"purple_700\">#FF3700B3</color>\r\n    <color name=\"teal_200\">#FF03DAC5</color>\r\n    <color name=\"teal_700\">#FF018786</color>\r\n    <color name=\"black\">#FF000000</color>\r\n    <color name=\"white\">#FFFFFFFF</color>\r\n\r\n\r\n    <color name=\"backgroundold\">#2D3047</color>\r\n    <color name=\"background\">#1E1E1E</color>\r\n    <color name=\"violets_blue\">#9B6BFE</color>\r\n    <color name=\"light_carmine_pink\">#EF7067</color>\r\n\r\n    //boxes colors\r\n    <color name=\"pink_50\">#F0BCE5</color>\r\n    <color name=\"pink_100\">#F9B8D0</color>\r\n    <color name=\"pink_200\">#E19AB8</color>\r\n    <color name=\"pink_300\">#DF6CB1</color>\r\n\r\n    <color name=\"light_green\">#34D227</color>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/colors.xml b/app/src/main/res/values/colors.xml
--- a/app/src/main/res/values/colors.xml	
+++ b/app/src/main/res/values/colors.xml	
@@ -9,7 +9,7 @@
     <color name="white">#FFFFFFFF</color>
 
 
-    <color name="backgroundold">#2D3047</color>
+    <color name="backgroundOld">#2D3047</color>
     <color name="background">#1E1E1E</color>
     <color name="violets_blue">#9B6BFE</color>
     <color name="light_carmine_pink">#EF7067</color>
Index: app/src/main/java/group4/sensimate/presentation/survey/SurveyViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package group4.sensimate.presentation.survey\r\n\r\nimport android.content.Context\r\nimport android.os.Environment\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.lifecycle.*\r\nimport group4.sensimate.data.model.Question\r\nimport group4.sensimate.data.repository.SurveyData\r\nimport group4.sensimate.data.repository.SurveyRepository\r\nimport kotlinx.coroutines.launch\r\nimport java.io.File\r\nimport java.io.FileOutputStream\r\nimport java.io.OutputStream\r\n\r\n\r\nclass SurveyViewModel (\r\n    private val surveyRepository: SurveyRepository,\r\n): ViewModel()\r\n{\r\n    private val _surveyState = MutableLiveData<SurveyState>()\r\n    val surveyState: LiveData<SurveyState> get() = _surveyState\r\n    private lateinit var surveyInitialState: SurveyState\r\n\r\n    init {\r\n        viewModelScope.launch {\r\n            val survey = surveyRepository.getSurvey()\r\n\r\n            val questions:List<QuestionState> = survey.questions.mapIndexed { index, question ->\r\n                val showPrevious = index > 0\r\n                val showDone = index == survey.questions.size - 1\r\n                QuestionState(\r\n                    question = question,\r\n                    questionIndex = index,\r\n                    totalQuestionsCount = survey.questions.size,\r\n                    showPrevious = showPrevious,\r\n                    showDone = showDone\r\n                )\r\n            }\r\n\r\n            surveyInitialState = SurveyState.Questions(survey.id, questions)\r\n            _surveyState.value = surveyInitialState\r\n        }\r\n    }\r\n\r\n\r\n    fun computeResult(surveyQuestions: SurveyState.Questions) {\r\n        FileOutputStream(\"/data/user/0/group4.sensimate/files/Surveys.csv\").apply { exportResult(surveyQuestions) }\r\n        val answers = surveyQuestions.questionsState.mapNotNull { it.answer }\r\n        val result = surveyRepository.getSurveyResult(answers)\r\n        _surveyState.value = SurveyState.Result(surveyQuestions.surveyId, result)\r\n    }\r\n\r\n\r\n    private fun OutputStream.exportResult(question: SurveyState.Questions) {\r\n        val writer = bufferedWriter()\r\n\r\n        writer.write(\"\"\"\"SurveyId\",\"Id\",\"question\",\"answer\"\"\"\")\r\n        writer.newLine()\r\n        writer.write(\"${question.surveyId}\")\r\n        writer.newLine()\r\n        question.questionsState.forEach{\r\n            writer.write(\"${it.questionIndex},${it.question},\\\"${it.answer}\")\r\n            writer.newLine()\r\n        }\r\n        writer.flush()\r\n    }\r\n\r\n    private fun getLatestQuestionId(): Int? {\r\n        val latestState = _surveyState.value\r\n        if (latestState != null && latestState is SurveyState.Questions) {\r\n            return latestState.questionsState[latestState.currentQuestionIndex].question.id\r\n        }\r\n        return null\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nclass SurveyViewModelFactory() : ViewModelProvider.Factory\r\n{\r\n    @Suppress(\"UNCHECKED_CAST\")\r\n    override fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n        if (modelClass.isAssignableFrom(SurveyViewModel::class.java)) {\r\n            return SurveyViewModel(SurveyData) as T\r\n        }\r\n        throw IllegalArgumentException(\"Unknown ViewModel class\")\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/group4/sensimate/presentation/survey/SurveyViewModel.kt b/app/src/main/java/group4/sensimate/presentation/survey/SurveyViewModel.kt
--- a/app/src/main/java/group4/sensimate/presentation/survey/SurveyViewModel.kt	
+++ b/app/src/main/java/group4/sensimate/presentation/survey/SurveyViewModel.kt	
@@ -43,8 +43,8 @@
     }
 
 
-    fun computeResult(surveyQuestions: SurveyState.Questions) {
-        FileOutputStream("/data/user/0/group4.sensimate/files/Surveys.csv").apply { exportResult(surveyQuestions) }
+    fun computeResult(surveyQuestions: SurveyState.Questions, path:File) {
+        FileOutputStream(path).apply { exportResult(surveyQuestions) }
         val answers = surveyQuestions.questionsState.mapNotNull { it.answer }
         val result = surveyRepository.getSurveyResult(answers)
         _surveyState.value = SurveyState.Result(surveyQuestions.surveyId, result)
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\golba\\.android\\avd\\Pixel_5_API_31_1.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2022-12-01T11:12:25.266471100Z\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	
+++ b/.idea/deploymentTargetDropDown.xml	
@@ -12,6 +12,6 @@
         </deviceKey>
       </Target>
     </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2022-12-01T11:12:25.266471100Z" />
+    <timeTargetWasSelectedWithDropDown value="2022-12-01T13:52:53.032817Z" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/group4/sensimate/ui/components/GradientEventList.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package group4.sensimate.ui.components\r\n\r\nimport android.content.Intent\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.ButtonDefaults\r\nimport androidx.compose.material.Card\r\nimport androidx.compose.material.OutlinedButton\r\nimport androidx.compose.material.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.colorResource\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport group4.sensimate.R\r\nimport group4.sensimate.data.model.Event\r\nimport group4.sensimate.presentation.navigation.graphs.SurveyDetailsScreen\r\nimport group4.sensimate.ui.theme.sensiMateColor\r\nimport group4.sensimate.ui.theme.sensiMateHorizontalColor\r\nimport group4.sensimate.ui.theme.sensiMateVerticalColor\r\nimport group4.sensimate.UserPreferences\r\nimport group4.sensimate.presentation.survey.SurveyActivity\r\n\r\n@Composable\r\nfun GradientEventList(eventList: List<Event>, page: String, navController: NavController) {\r\n\r\n    LazyColumn(\r\n        contentPadding = PaddingValues(15.dp),\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(color = colorResource(R.color.background))\r\n    ) {\r\n        items(eventList){event ->\r\n            Box(\r\n                contentAlignment = Alignment.TopStart,\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .padding(20.dp)\r\n                    .clip(RoundedCornerShape(20.dp))\r\n                    .background( brush = sensiMateVerticalColor() )\r\n            )\r\n            {\r\n                val context= LocalContext.current\r\n                val role = UserPreferences(context).getRole.collectAsState(initial = \"\")\r\n\r\n                if (page == \"Profile\" && role.value !=\"Admin\") {\r\n                    Text(text = \"Attended Event\", modifier = Modifier.padding(start= 8.dp))\r\n                }\r\n\r\n                EventCard(event = event, page= page, navController)\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Composable\r\nfun EventCard(event: Event, page: String, navController: NavController){\r\n    Card(\r\n        shape = RoundedCornerShape(20.dp),\r\n        elevation = 5.dp,\r\n        border= BorderStroke( 2.dp, brush = sensiMateHorizontalColor() ),\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .wrapContentHeight()\r\n            .padding(top= 25.dp, bottom = 10.dp, start = 10.dp, end= 10.dp)\r\n    )\r\n    {\r\n        Row(\r\n            horizontalArrangement = Arrangement.Center,\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .background(brush = sensiMateHorizontalColor())\r\n        )\r\n        {\r\n            Image(\r\n                painter = painterResource(event.imageId!!),\r\n                contentDescription = null,//stringResource(event.id),\r\n                contentScale = ContentScale.Fit,\r\n                modifier = Modifier\r\n                    .size(130.dp)\r\n                    .padding(8.dp)\r\n                    .clip(CircleShape)\r\n                    .border(2.dp, Color.Gray, CircleShape)\r\n            )\r\n\r\n            Column(\r\n                modifier = Modifier\r\n                    .padding(8.dp)\r\n                    .background(Color.Transparent)\r\n            )\r\n            {\r\n                Text(text = event.title)\r\n                Text(text = event.description)\r\n                Text(text = event.startDate)\r\n                Text(text = event.endDate)\r\n\r\n\r\n                if(page ==\"Profile\") {\r\n                    val context = LocalContext.current\r\n                    OutlinedButton(\r\n                        onClick = { /* should navigate to answer screen to see the result. but it is not implemented yet*/  },\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .background(Color.Transparent),\r\n                        colors = ButtonDefaults.buttonColors(backgroundColor = Color.Transparent),\r\n                        border = BorderStroke(width = 2.dp, brush = sensiMateColor())\r\n                    ) {\r\n                        Text(\"See Answer\", fontSize = 20.sp, color = Color.Black)\r\n                    }\r\n                }else{\r\n                    OutlinedButton(\r\n                        onClick = {\r\n                            navController.navigate(SurveyDetailsScreen.ScanBarCode.route)\r\n                        },\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .background(Color.Transparent),\r\n                        colors = ButtonDefaults.buttonColors(backgroundColor = Color.Transparent),\r\n                        border = BorderStroke(width = 2.dp, brush = sensiMateColor())\r\n                    ) {\r\n                        Text(\"Evaluate\", fontSize = 20.sp, color = Color.Black)\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/group4/sensimate/ui/components/GradientEventList.kt b/app/src/main/java/group4/sensimate/ui/components/GradientEventList.kt
--- a/app/src/main/java/group4/sensimate/ui/components/GradientEventList.kt	
+++ b/app/src/main/java/group4/sensimate/ui/components/GradientEventList.kt	
@@ -127,7 +127,8 @@
                 }else{
                     OutlinedButton(
                         onClick = {
-                            navController.navigate(SurveyDetailsScreen.ScanBarCode.route)
+                            //navController.navigate(SurveyDetailsScreen.ScanBarCode.route)
+                            navController.navigate(SurveyDetailsScreen.LaunchSurvey.route)
                         },
                         modifier = Modifier
                             .fillMaxWidth()
