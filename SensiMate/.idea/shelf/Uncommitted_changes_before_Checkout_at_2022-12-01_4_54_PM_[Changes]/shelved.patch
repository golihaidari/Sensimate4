Index: app/src/main/java/group4/sensimate/presentation/survey/SurveyActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package group4.sensimate.presentation.survey\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.activity.viewModels\r\nimport androidx.compose.animation.*\r\nimport androidx.compose.animation.core.TweenSpec\r\nimport androidx.compose.animation.core.animateFloatAsState\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.foundation.*\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.selection.selectable\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.livedata.observeAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.colorResource\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.IntOffset\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport androidx.navigation.NavController\r\nimport com.siddroid.holi.brushes.GradientMixer\r\nimport group4.sensimate.R\r\nimport group4.sensimate.UserPreferences\r\nimport group4.sensimate.data.model.*\r\nimport group4.sensimate.ui.theme.SensiMateTheme\r\nimport java.io.OutputStream\r\n\r\nclass SurveyActivity : ComponentActivity() {\r\n    val viewModel: SurveyViewModel by viewModels {\r\n        SurveyViewModelFactory()\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r\n            SensiMateTheme {\r\n                val state = viewModel.surveyState.observeAsState().value?:return@SensiMateTheme\r\n\r\n                when (state) {\r\n                    is SurveyState.Questions -> SurveyScreen(\r\n                        questions = state,\r\n                        onDonePressed = { viewModel.computeResult(state) },\r\n                        onBackPressed = {\r\n                            this.onBackPressedDispatcher.onBackPressed()\r\n                        }\r\n                    )\r\n                    is SurveyState.Result -> SurveyResultScreen(\r\n                        result = state,\r\n                        onDonePressed = {\r\n                            this.onBackPressedDispatcher.onBackPressed()\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun LoadSurveyPreview() {\r\n    SensiMateTheme {\r\n        //SurveyScreen()\r\n    }\r\n}\r\n\r\n@SuppressLint(\"UnusedMaterialScaffoldPaddingParameter\")\r\n@Composable\r\nfun SurveyScreen(\r\n    questions: SurveyState.Questions,\r\n    onDonePressed: () -> Unit,\r\n    onBackPressed: () -> Unit\r\n){\r\n    val questionState = remember(questions.currentQuestionIndex) {\r\n        questions.questionsState[questions.currentQuestionIndex]\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .fillMaxHeight()\r\n            .background(colorResource(R.color.pink_50))\r\n    ){\r\n        val brush= GradientMixer.topToBottom(colorResource(R.color.pink_300),colorResource(R.color.pink_100))\r\n        Box( modifier = Modifier\r\n            .size(400.dp)\r\n            .clip(CircleShape)\r\n            .align(alignment = Alignment.TopCenter)\r\n            .background(brush = brush) )\r\n\r\n        Box( modifier = Modifier\r\n            .size(400.dp)\r\n            .clip(CircleShape)\r\n            .align(alignment = Alignment.Center)\r\n            .background(colorResource(R.color.pink_200)) )\r\n\r\n        Box( modifier = Modifier\r\n            .size(400.dp)\r\n            .clip(CircleShape)\r\n            .align(alignment = Alignment.BottomCenter)\r\n            .background(brush = brush) )\r\n\r\n        Scaffold(\r\n            backgroundColor = Color.Transparent,\r\n            topBar = {\r\n                SurveyTopBar(\r\n                    questionIndex = questionState.questionIndex,\r\n                    totalQuestionsCount = questionState.totalQuestionsCount,\r\n                    onBackPressed = onBackPressed\r\n                )\r\n            },\r\n            content = {\r\n                QuestionContent(\r\n                    question = questionState.question,\r\n                    answer = questionState.answer,\r\n                    onAnswer = { questionState.enableNext = true },\r\n                    modifier = Modifier.background(Color.Transparent)\r\n                )\r\n            },\r\n            bottomBar = {\r\n                SurveyBottomBar(\r\n                    questionState = questionState,\r\n                    onPreviousPressed = { questions.currentQuestionIndex-- },\r\n                    onNextPressed = { questions.currentQuestionIndex++ },\r\n                    onDonePressed = onDonePressed\r\n                )\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n\r\n@SuppressLint(\"UnusedMaterialScaffoldPaddingParameter\")\r\n@Composable\r\nfun SurveyResultScreen(\r\n    result: SurveyState.Result,\r\n    onDonePressed: () -> Unit\r\n){\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .fillMaxHeight()\r\n            .background(colorResource(R.color.pink_50))\r\n    ) {\r\n        val brush = GradientMixer.topToBottom(\r\n            colorResource(R.color.pink_300),\r\n            colorResource(R.color.pink_100)\r\n        )\r\n        Box( modifier = Modifier\r\n            .size(400.dp)\r\n            .clip(CircleShape)\r\n            .align(alignment = Alignment.TopCenter)\r\n            .background(brush = brush) )\r\n\r\n        Box( modifier = Modifier\r\n            .size(400.dp)\r\n            .clip(CircleShape)\r\n            .align(alignment = Alignment.Center)\r\n            .background(colorResource(R.color.pink_200)) )\r\n\r\n        Box( modifier = Modifier\r\n                .size(400.dp)\r\n                .clip(CircleShape)\r\n                .align(alignment = Alignment.BottomCenter)\r\n                .background(brush = brush) )\r\n\r\n        Scaffold(\r\n            backgroundColor = Color.Transparent,\r\n            content = {\r\n                SurveyResult( result = result)\r\n            },\r\n            bottomBar = {\r\n                OutlinedButton(\r\n                    shape= CircleShape,\r\n                    onClick = { onDonePressed() },\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(horizontal = 20.dp, vertical = 24.dp)\r\n                ) {\r\n                    Text(text = stringResource(id = R.string.done))\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SurveyResult( result: SurveyState.Result )\r\n{\r\n    Box(\r\n        modifier = Modifier.fillMaxSize()\r\n        .padding(vertical = 8.dp),\r\n    )\r\n    {\r\n        Box(\r\n            modifier = Modifier\r\n                .size(400.dp)\r\n                //.clip(CircleShape)\r\n                .align(alignment = Alignment.Center)\r\n                .background(Color.White.copy(alpha= 0.15f))\r\n        )\r\n        {\r\n            LazyColumn(\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                verticalArrangement = Arrangement.Center\r\n            )\r\n            {\r\n                item {\r\n                    Spacer(modifier = Modifier.height(44.dp))\r\n                    Text(\r\n                        text = result.surveyResult.library,\r\n                        style = MaterialTheme.typography.h4,\r\n                        modifier = Modifier.padding(horizontal = 20.dp)\r\n                    )\r\n                    Text(\r\n                        text = stringResource(\r\n                            result.surveyResult.result,\r\n                            result.surveyResult.library\r\n                        ),\r\n                        style = MaterialTheme.typography.h6,\r\n                        modifier = Modifier.padding(20.dp)\r\n                    )\r\n                    Text(\r\n                        text = stringResource(\r\n                            result.surveyResult.description,\r\n                            result.surveyResult.library\r\n                        ),\r\n                        modifier = Modifier.padding(horizontal = 20.dp)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SurveyTopBar(\r\n    questionIndex: Int,\r\n    totalQuestionsCount: Int,\r\n    onBackPressed: () -> Unit\r\n) {\r\n    Column(modifier = Modifier.fillMaxWidth()) {\r\n        Box(modifier = Modifier.fillMaxWidth()) {\r\n\r\n            Row(modifier = Modifier\r\n                .padding(vertical = 20.dp)\r\n                .align(Alignment.Center)\r\n            ) {\r\n                Text( text = (questionIndex + 1).toString() )\r\n                Text( text = stringResource(R.string.question_count, totalQuestionsCount) )\r\n            }\r\n\r\n            IconButton(\r\n                onClick = onBackPressed,\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 20.dp, vertical = 20.dp)\r\n            ) {\r\n                Icon(\r\n                    Icons.Filled.Close,\r\n                    contentDescription = stringResource(id = R.string.close),\r\n                    modifier = Modifier.align(Alignment.CenterEnd)\r\n                )\r\n            }\r\n        }\r\n\r\n        val animatedProgress by animateFloatAsState(\r\n            targetValue = (questionIndex + 1) / totalQuestionsCount.toFloat(),\r\n            animationSpec = ProgressIndicatorDefaults.ProgressAnimationSpec\r\n        )\r\n        LinearProgressIndicator(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 30.dp),\r\n            progress = animatedProgress,\r\n            backgroundColor= Color.White,\r\n            color = colorResource(id = R.color.violets_blue)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SurveyBottomBar(\r\n    questionState: QuestionState,\r\n    onPreviousPressed: () -> Unit,\r\n    onNextPressed: () -> Unit,\r\n    onDonePressed: () -> Unit\r\n) {\r\n    Row( modifier = Modifier\r\n        .fillMaxWidth()\r\n        .padding(horizontal = 16.dp, vertical = 20.dp)\r\n    ) {\r\n        if (questionState.showPrevious) {\r\n            OutlinedButton(\r\n                onClick = onPreviousPressed,\r\n                shape = CircleShape,\r\n                modifier = Modifier\r\n                    .weight(1f)\r\n                    .height(48.dp)\r\n            ) {\r\n                Text(text = stringResource(id = R.string.previous))\r\n            }\r\n            Spacer(modifier = Modifier.width(16.dp))\r\n        }\r\n        if (questionState.showDone) {\r\n            Button(\r\n                onClick = onDonePressed,\r\n                shape = CircleShape,\r\n                enabled = questionState.enableNext,\r\n                modifier = Modifier\r\n                    .weight(1f)\r\n                    .height(48.dp)\r\n            ) {\r\n                Text(text = stringResource(id = R.string.done))\r\n            }\r\n        } else {\r\n            Button(\r\n                onClick = onNextPressed,\r\n                shape = CircleShape,\r\n                enabled = questionState.enableNext,\r\n                modifier = Modifier\r\n                    .weight(1f)\r\n                    .height(48.dp)\r\n\r\n            ) {\r\n                Text(text = stringResource(id = R.string.next))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n@Composable\r\nprivate fun QuestionContent(\r\n    question: Question,\r\n    answer: Answer<*>?,\r\n    onAnswer: (Answer<*>) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    LazyColumn(\r\n        modifier = modifier,\r\n        contentPadding = PaddingValues(start = 20.dp, end = 20.dp)\r\n    ) {\r\n        item {\r\n            Spacer(modifier = Modifier.height(32.dp))\r\n\r\n            Text(\r\n                text = question.id.toString() +\". \" + question.text,\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 24.dp, horizontal = 16.dp)\r\n            )\r\n\r\n            Spacer(modifier = Modifier.height(24.dp))\r\n\r\n            when(question.answer) {\r\n                is PossibleAnswer.SingleChoice -> RadioButtonQuestion(\r\n                    possibleAnswer = question.answer,\r\n                    answer = answer as Answer.SingleChoice?,\r\n                    onAnswerSelected = { answer -> onAnswer(Answer.SingleChoice(answer)) },\r\n                    modifier = Modifier.fillParentMaxWidth()\r\n                )\r\n\r\n                is PossibleAnswer.MultipleChoice -> CheckBoxQuestion(\r\n                    possibleAnswer = question.answer,\r\n                    answer = answer as Answer.MultipleChoice?,\r\n                    onAnswerSelected = { newAnswer, selected ->\r\n                        // create the answer if it doesn't exist or update it based on the user's selection\r\n                        if (answer == null) {\r\n                            onAnswer(Answer.MultipleChoice(setOf(newAnswer)))\r\n                        } else {\r\n                            onAnswer(answer.withAnswerSelected(newAnswer, selected))\r\n                        }\r\n                    },\r\n                    modifier = Modifier.fillParentMaxWidth()\r\n                )\r\n\r\n\r\n                is PossibleAnswer.Slider -> SliderQuestion(\r\n                    possibleAnswer = question.answer,\r\n                    answer = answer as Answer.Slider?,\r\n                    onAnswerSelected = { onAnswer(Answer.Slider(it)) },\r\n                    modifier = Modifier.fillParentMaxWidth()\r\n                )\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/* survey can have the following question types:\r\n    - RadioButtonQuestion for singlechoice questions\r\n    -CheckboxQuestion for multichoicequestion\r\n    -sliderquestion for sliderquestions\r\n */\r\n//------------------------------------------------------------------------\r\n@Composable\r\nprivate fun RadioButtonQuestion(\r\n    possibleAnswer: PossibleAnswer.SingleChoice,\r\n    answer: Answer.SingleChoice?,\r\n    onAnswerSelected: (String) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val options = possibleAnswer.options.associateBy { it }\r\n\r\n    val radioOptions = options.keys.toList()\r\n\r\n    val selected = answer?.answer\r\n\r\n    val (selectedOption, onOptionSelected) = remember(answer) { mutableStateOf(selected) }\r\n\r\n    Column(modifier = modifier) {\r\n        radioOptions.forEach { text ->\r\n            val onClickHandle = {\r\n                onOptionSelected(text)\r\n                options[text]?.let { onAnswerSelected(it) }\r\n                Unit\r\n            }\r\n            val optionSelected = text == selectedOption\r\n\r\n            Surface(\r\n                color = Color.White.copy(alpha = 0.7f),\r\n                border = BorderStroke(\r\n                    width = 1.dp,\r\n                    color = colorResource(R.color.violets_blue)\r\n                ),\r\n                modifier = Modifier.fillMaxSize()\r\n                    .padding(vertical = 8.dp)\r\n            ) {\r\n                Row(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .selectable(\r\n                            selected = optionSelected,\r\n                            onClick = onClickHandle\r\n                        )\r\n                        .padding(vertical = 16.dp, horizontal = 16.dp),\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.SpaceBetween\r\n                ) {\r\n                    Text(text = text)\r\n\r\n                    RadioButton(\r\n                        selected = optionSelected,\r\n                        onClick = onClickHandle,\r\n                        colors = RadioButtonDefaults.colors(\r\n                            selectedColor = colorResource(R.color.violets_blue )\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun CheckBoxQuestion(\r\n    possibleAnswer: PossibleAnswer.MultipleChoice,\r\n    answer: Answer.MultipleChoice?,\r\n    onAnswerSelected: (String, Boolean) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val options = possibleAnswer.options.associateBy { it }\r\n    Column(modifier = modifier) {\r\n        for (option in options) {\r\n            var checkedState by remember(answer) {\r\n                val selectedOption = answer?.answersStringRes?.contains(option.value)\r\n                mutableStateOf(selectedOption ?: false)\r\n            }\r\n\r\n            Surface(\r\n                color = Color.White.copy(alpha = 0.7f),\r\n                shape = MaterialTheme.shapes.small,\r\n                border = BorderStroke(\r\n                    width = 1.dp,\r\n                    color = colorResource(R.color.violets_blue)\r\n                ),\r\n                modifier = Modifier\r\n                    .padding(vertical = 8.dp)\r\n            ) {\r\n                Row(\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.SpaceBetween,\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .background(Color.Transparent)\r\n                        .padding(vertical = 16.dp, horizontal = 16.dp)\r\n                        .clickable(\r\n                            onClick = {\r\n                                checkedState = !checkedState\r\n                                onAnswerSelected(option.value, checkedState)\r\n                            }\r\n                        )\r\n                ) {\r\n                    Text(text = option.key)\r\n\r\n                    Checkbox(\r\n                        checked = checkedState,\r\n                        onCheckedChange = { selected ->\r\n                            checkedState = selected\r\n                            onAnswerSelected(option.value, selected)\r\n                        },\r\n                        colors = CheckboxDefaults.colors(\r\n                            checkedColor = colorResource(R.color.violets_blue ),\r\n                            checkmarkColor = colorResource(R.color.light_carmine_pink)\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SliderQuestion(\r\n    possibleAnswer: PossibleAnswer.Slider,\r\n    answer: Answer.Slider?,\r\n    onAnswerSelected: (Float) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    var sliderPosition by remember {\r\n        mutableStateOf(answer?.answerValue ?: possibleAnswer.defaultValue)\r\n    }\r\n    Row(modifier = modifier) {\r\n        Slider(\r\n            value = sliderPosition,\r\n            onValueChange = {\r\n                sliderPosition = it\r\n                onAnswerSelected(it)\r\n            },\r\n            valueRange = possibleAnswer.range,\r\n            steps = possibleAnswer.steps,\r\n            modifier = Modifier\r\n                .padding(horizontal = 16.dp)\r\n                .weight(1f)\r\n        )\r\n    }\r\n    Row {\r\n        Text(\r\n            text = possibleAnswer.startText,\r\n            textAlign = TextAlign.Start,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .weight(1.8f)\r\n        )\r\n        Text(\r\n            text = possibleAnswer.neutralText,\r\n            textAlign = TextAlign.Center,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .weight(1.8f)\r\n        )\r\n        Text(\r\n            text = possibleAnswer.endText,\r\n            textAlign = TextAlign.End,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .weight(1.8f)\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/group4/sensimate/presentation/survey/SurveyActivity.kt b/app/src/main/java/group4/sensimate/presentation/survey/SurveyActivity.kt
--- a/app/src/main/java/group4/sensimate/presentation/survey/SurveyActivity.kt	
+++ b/app/src/main/java/group4/sensimate/presentation/survey/SurveyActivity.kt	
@@ -2,6 +2,7 @@
 
 import android.annotation.SuppressLint
 import android.os.Bundle
+import android.os.Environment
 import androidx.activity.ComponentActivity
 import androidx.activity.compose.setContent
 import androidx.activity.viewModels
@@ -39,7 +40,6 @@
 import group4.sensimate.UserPreferences
 import group4.sensimate.data.model.*
 import group4.sensimate.ui.theme.SensiMateTheme
-import java.io.OutputStream
 
 class SurveyActivity : ComponentActivity() {
     val viewModel: SurveyViewModel by viewModels {
@@ -50,12 +50,15 @@
         super.onCreate(savedInstanceState)
         setContent {
             SensiMateTheme {
+
+                val path= Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS + "/Surveys.csv")
+
                 val state = viewModel.surveyState.observeAsState().value?:return@SensiMateTheme
 
                 when (state) {
                     is SurveyState.Questions -> SurveyScreen(
                         questions = state,
-                        onDonePressed = { viewModel.computeResult(state) },
+                        onDonePressed = { viewModel.computeResult(state, path) },
                         onBackPressed = {
                             this.onBackPressedDispatcher.onBackPressed()
                         }
